# RouteServer in HUB with NVA and two Spokes and onprem s2s vpn tunnel
# variables
rg=rs
location='centralindia'

hub_vnet_name='hub'
hub_vnet_address='10.1.0.0/16'
hub_gw_name=hub-gw
hub_gw_asn=65515
hub_gw_subnet_address='10.1.0.0/24'
hub_rs_name=hub-rs
hub_rs_subnet_address='10.1.2.0/24'
hub_nva_subnet_address='10.1.3.0/24'
hub_vms_subnet_address='10.1.1.0/24'
hub_vms_subnet_name='vms'
hub_nva_subnet_name='nva'
hub_nva_name='nva'
hub_nva_asn=65001
hub_vm_name='hub'

spoke1_vnet_name='spoke1'
spoke1_vnet_address='10.11.1.0/24'
spoke1_subnet_name='vms'
spoke1_subnet_address='10.11.1.0/24'
spoke1_vm_name='spoke1'

spoke2_vnet_name='spoke2'
spoke2_vnet_address='10.12.1.0/24'
spoke2_subnet_name='vms'
spoke2_subnet_address='10.12.1.0/24'
spoke2_vm_name='spoke2'

hub_spokes_address='10.1.0.0/16'

onprem_vnet_name='onprem'
onprem_vnet_address='172.16.0.0/16'
onprem_vm_subnet_name='vms'
onprem_vm_subnet_address='172.16.1.0/24'
onprem_gw_subnet_name='gw'
onprem_gw_subnet_address='172.16.0.0/24'
onprem_gw_vm_name='onprem-gw'
onprem_gw_asn=65016
onprem_vm_name='onprem'
admin_username=$(whoami)
psk='secret123'
vm_size=Standard_B2ats_v2
vm_image=$(az vm image list -l $location -p Canonical -s 22_04-lts --all --query "[?offer=='0001-com-ubuntu-server-jammy'].urn" -o tsv | sort -u | tail -n 1) && echo $vm_image
default_address1='0.0.0.0/1'
default_address2='128.0.0.0/1'

# cloudinit
cloudinit_file=~/cloudinit.txt
cat <<EOF > $cloudinit_file
#cloud-config
runcmd:
  - curl -s https://deb.frrouting.org/frr/keys.gpg | sudo tee /usr/share/keyrings/frrouting.gpg > /dev/null
  - echo deb [signed-by=/usr/share/keyrings/frrouting.gpg] https://deb.frrouting.org/frr \$(lsb_release -s -c) frr-stable | sudo tee -a /etc/apt/sources.list.d/frr.list
  - sudo apt update && sudo apt install -y frr frr-pythontools
  - sudo apt install -y strongswan tcptraceroute
  - sudo sed -i "/bgpd=no/ s//bgpd=yes/" /etc/frr/daemons
  - sudo service frr restart
  - touch /etc/strongswan.d/ipsec-vti.sh
  - chmod +x /etc/strongswan.d/ipsec-vti.sh
  - cp /etc/ipsec.conf /etc/ipsec.conf.bak
  - cp /etc/ipsec.secrets /etc/ipsec.secrets.bak
  - echo "net.ipv4.conf.all.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - echo "net.ipv4.conf.default.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - sudo sysctl -p
EOF

#  - sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

function wait_until_finished {
     wait_interval=15
     resource_id=$1
     resource_name=$(echo $resource_id | cut -d/ -f 9)
     echo -e "\e[1;36mWaiting for resource $resource_name to finish provisioning...\e[0m"
     start_time=`date +%s`
     state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     until [[ "$state" == "Succeeded" ]] || [[ "$state" == "Failed" ]] || [[ -z "$state" ]]
     do
        sleep $wait_interval
        state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     done
     if [[ -z "$state" ]]
     then
        echo -e "\e[1;31mSomething really bad happened...\e[0m"
     else
        run_time=$(expr `date +%s` - $start_time)
        ((minutes=${run_time}/60))
        ((seconds=${run_time}%60))
        echo -e "\e[1;32mResource $resource_name provisioning state is $state, wait time $minutes minutes and $seconds seconds\e[0m"
     fi
}

function first_ip(){
    subnet=$1
    IP=$(echo $subnet | cut -d/ -f 1)
    IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' `echo $IP | sed -e 's/\./ /g'`)
    NEXT_IP_HEX=$(printf %.8X `echo $(( 0x$IP_HEX + 1 ))`)
    NEXT_IP=$(printf '%d.%d.%d.%d\n' `echo $NEXT_IP_HEX | sed -r 's/(..)/0x\1 /g'`)
    echo "$NEXT_IP"
}

# Resource Groups
echo -e "\e[1;36mCreating $rg Resource Group...\e[0m"
az group create -l $location -n $rg -o none

# hub vnet
echo -e "\e[1;36mCreating $hub_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $hub_vnet_name --address-prefixes $hub_vnet_address --subnet-name $hub_vms_subnet_name --subnet-prefixes $hub_vms_subnet_address -o none
az network vnet subnet create -g $rg -n $hub_nva_subnet_name --address-prefixes $hub_nva_subnet_address --vnet-name $hub_vnet_name -o none
az network vnet subnet create -g $rg -n RouteServerSubnet --address-prefixes $hub_rs_subnet_address --vnet-name $hub_vnet_name -o none
az network vnet subnet create -g $rg -n GatewaySubnet --address-prefixes $hub_gw_subnet_address --vnet-name $hub_vnet_name -o none

# Protect NVA Subnet from Route Changes:
echo -e "\e[1;36mDeploying $hub_nva_name-rt Route table to protect $hub_nva_name VM from route changes...\e[0m"
az network route-table create -n $hub_nva_name-rt -g $rg --disable-bgp-route-propagation true -o none
az network vnet subnet update -g $rg --vnet-name $hub_vnet_name -n $hub_nva_subnet_name --route-table $hub_nva_name-rt -o none

# hub nva
echo -e "\e[1;36mDeploying $hub_nva_name VM...\e[0m"
az network public-ip create -n "$hub_nva_name-pubip" -g $rg --allocation-method Static --sku Basic -o none
az network nic create -n "$hub_nva_name-ext-nic" --vnet-name $hub_vnet_name -g $rg --subnet $hub_nva_subnet_name --ip-forwarding true --public-ip-address "$hub_nva_name-pubip" -o none
az network nic create -n "$hub_nva_name-int-nic" --vnet-name $hub_vnet_name -g $rg --subnet $hub_vms_subnet_name --ip-forwarding true -o none
az vm create -n $hub_nva_name -g $rg --image $vm_image --nics "$hub_nva_name-ext-nic" "$hub_nva_name-int-nic" --os-disk-name "$hub_nva_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file --no-wait

# nva details
echo -e "\e[1;36mGetting $hub_nva_name details...\e[0m"
hub_nva_pubip=$(az network public-ip show -g $rg -n "$hub_nva_name-pubip" --query ipAddress -o tsv) && echo $hub_nva_name: $hub_nva_pubip
hub_nva_private_ext_ip=$(az network nic show -g $rg -n $hub_nva_name-ext-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $hub_nva_name external NIC IP: $hub_nva_private_ext_ip
hub_nva_private_int_ip=$(az network nic show -g $rg -n $hub_nva_name-int-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $hub_nva_name internal NIC IP: $hub_nva_private_int_ip
nva_ext_gw_ip=$(first_ip $hub_nva_subnet_address) && echo $hub_nva_name external NIC default gateway IP: $nva_ext_gw_ip
nva_int_gw_ip=$(first_ip $hub_vms_subnet_address) && echo $hub_nva_name internal NIC default gateway IP: $nva_int_gw_ip

# spoke1 vnet
echo -e "\e[1;36mCreating $spoke1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke1_vnet_name --address-prefixes $spoke1_vnet_address --subnet-name $spoke1_subnet_name --subnet-prefixes $spoke1_subnet_address -o none
# spoke2 vnet
echo -e "\e[1;36mCreating $spoke2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke2_vnet_name --address-prefixes $spoke2_vnet_address --subnet-name $spoke2_subnet_name --subnet-prefixes $spoke2_subnet_address -o none
# onprem vnet
echo -e "\e[1;36mCreating $onprem_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $onprem_vnet_name --address-prefixes $onprem_vnet_address --subnet-name $onprem_vm_subnet_name --subnet-prefixes $onprem_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $onprem_gw_subnet_name --address-prefixes $onprem_gw_subnet_address --vnet-name $onprem_vnet_name -o none

# route server
echo -e "\e[1;36mDeploying $hub_rs_name Azure Route Server Resource in $hub_vnet_name...\e[0m"
az network public-ip create -n $hub_rs_name-pubip -g $rg --allocation-method Static --sku Standard -o none
rs_subnet_id=$(az network vnet subnet show -g $rg -n RouteServerSubnet --vnet-name $hub_vnet_name --query id -o tsv)
rstart_time=$(date +%s)
az network routeserver create -g $rg -n $hub_rs_name --hosted-subnet $rs_subnet_id --public-ip-address $hub_rs_name-pubip -o none
rfinish_time=$(date +%s)
rrun_time=$(($rfinish_time - $rstart_time))
((rminutes=rrun_time/60))
((rseconds=rrun_time%60))
echo -e "\e[1;33mCreating Azure Route Server took $rminutes minutes and $rseconds seconds\e[0m"
# Enable B2B on Route Server
echo -e "\e[1;36mEnabling Branch-to-Branch setting on $hub_rs_name Azure Route Server...\e[0m"
az network routeserver update -n $hub_rs_name -g $rg --allow-b2b-traffic true -o none
# Set Routing Preference to VpnGateway
echo -e "\e[1;36mSet Routing Preference to VpnGateway on $hub_rs_name Azure Route Server...\e[0m"
az network routeserver update -n $hub_rs_name -g $rg --hub-routing-preference VpnGateway -o none

# route server details
echo -e "\e[1;36mGetting $hub_rs_name Route Sever details...\e[0m"
rs_ip1=$(az network routeserver show -g $rg -n $hub_rs_name --query virtualRouterIps[0] -o tsv) && echo $hub_rs_name IP1: $rs_ip1
rs_ip2=$(az network routeserver show -g $rg -n $hub_rs_name --query virtualRouterIps[1] -o tsv) && echo $hub_rs_name IP2: $rs_ip2
rs_asn=$(az network routeserver show -g $rg -n $hub_rs_name --query virtualRouterAsn -o tsv) && echo $hub_rs_name ASN: $rs_asn

# vnet peering
echo -e "\e[1;36mEstablishing VNet Peering between $hub_vnet_name and $spoke1_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub_vnet_name-to-$spoke1_vnet_name -g $rg --vnet-name $hub_vnet_name --remote-vnet $spoke1_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
az network vnet peering create -n $spoke1_vnet_name-to-$hub_vnet_name -g $rg --vnet-name $spoke1_vnet_name --remote-vnet $hub_vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none
echo -e "\e[1;36mEstablishing VNet Peering between $hub_vnet_name and $spoke2_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub_vnet_name-to-$spoke2_vnet_name -g $rg --vnet-name $hub_vnet_name --remote-vnet $spoke2_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
az network vnet peering create -n $spoke2_vnet_name-to-$hub_vnet_name -g $rg --vnet-name $spoke2_vnet_name --remote-vnet $hub_vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none

# Create BGP Peering between RouteServer and NVA
echo -e "\e[1;36mCreating a BGP peering connection between $hub_rs_name Azure Route Server and $hub_nva_name VM...\e[0m"
az network routeserver peering create -g $rg -n $hub_nva_name-peering --routeserver $hub_rs_name --peer-ip $hub_nva_private_ext_ip --peer-asn $hub_nva_asn --no-wait -o none

#####################
# NVA Configuration #
#####################
echo -e "\e[1;36mCreating BGP Config files for $hub_nva_name VM...\e[0m"

# # frr.conf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 10.1
frr defaults traditional
hostname $hub_nva_name
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $default_address1 $nva_ext_gw_ip
ip route $default_address2 $nva_ext_gw_ip
ip route $onprem_vnet_address $nva_int_gw_ip
ip route $rs_ip1/32 $nva_ext_gw_ip
ip route $rs_ip2/32 $nva_ext_gw_ip
ip route 2.2.2.2/32 $nva_ext_gw_ip
!
router bgp $hub_nva_asn
 bgp router-id $hub_nva_private_ext_ip
 no bgp ebgp-requires-policy
 neighbor $rs_ip1 remote-as $rs_asn
 neighbor $rs_ip1 description rs2
 neighbor $rs_ip1 ebgp-multihop 255
 neighbor $rs_ip2 remote-as $rs_asn
 neighbor $rs_ip2 description rs1
 neighbor $rs_ip2 ebgp-multihop 255
 !
 address-family ipv4 unicast
  network $default_address1
  network $default_address2
  network 2.2.2.2/32
  neighbor $rs_ip1 soft-reconfiguration inbound
  neighbor $rs_ip2 soft-reconfiguration inbound
 exit-address-family
exit
!
EOF

##### copy files to hub nva
echo -e "\e[1;36mCopying and applying BGP config files to $hub_nva_name VM...\e[0m"
scp -o StrictHostKeyChecking=no $frr_conf_file $hub_nva_pubip:/home/$admin_username
# enable NAT, apply bgpd/zebra config files
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/ && sudo service frr restart && sudo service frr status"
# clean up config files
rm $frr_conf_file

# Hub VPN GW
echo -e "\e[1;36mDeploying $hub_gw_name VPN Gateway...\e[0m"
az network public-ip create -g $rg -n $hub_gw_name-pubip1 --allocation-method Static -o none
az network public-ip create -g $rg -n $hub_gw_name-pubip2 --allocation-method Static -o none
az network vnet-gateway create -g $rg -n $hub_gw_name --public-ip-addresses $hub_gw_name-pubip1 $hub_gw_name-pubip2 --vnet $hub_vnet_name --asn $hub_gw_asn --sku VpnGw1 --gateway-type Vpn --vpn-type RouteBased --no-wait

# onprem g
echo -e "\e[1;36mDeploying $onprem_gw_vm_name VM...\e[0m"
az network public-ip create -n "$onprem_gw_vm_name-pubip" -g $rg --allocation-method Static --sku Basic -o none
az network nic create -n "$onprem_gw_vm_name-ext-nic" --vnet-name $onprem_vnet_name -g $rg --subnet $onprem_gw_subnet_name --ip-forwarding true --public-ip-address "$onprem_gw_vm_name-pubip" -o none
az network nic create -n "$onprem_gw_vm_name-int-nic" --vnet-name $onprem_vnet_name -g $rg --subnet $onprem_vm_subnet_name --ip-forwarding true -o none
az vm create -n $onprem_gw_vm_name -g $rg --image $vm_image --nics $onprem_gw_vm_name-ext-nic $onprem_gw_vm_name-int-nic --os-disk-name "$onprem_gw_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file  --no-wait

# onrepm gw details
onprem_gw_pubip=$(az network public-ip show -g $rg -n $onprem_gw_vm_name-pubip --query ipAddress -o tsv) && echo $onprem_gw_vm_name: $onprem_gw_pubip
onprem_gw_ext_private_ip=$(az network nic show -g $rg -n $onprem_gw_vm_name-ext-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $onprem_gw_vm_name external NIC IP: $onprem_gw_ext_private_ip
onprem_gw_ext_gw_ip=$(first_ip $onprem_gw_subnet_address) && echo $onprem_gw_vm_name external NIC default gateway IP: $onprem_gw_ext_gw_ip

# local gateway
echo -e "\e[1;36mDeploying $onprem_gw_vm_name local gateway resource...\e[0m"
az network local-gateway create -g $rg -n $onprem_gw_vm_name --gateway-ip-address $onprem_gw_pubip --asn $onprem_gw_asn --bgp-peering-address $onprem_gw_ext_private_ip --local-address-prefixes $onprem_vnet_address -o none

# hub vm
echo -e "\e[1;36mDeploying $hub_vm_name VM...\e[0m"
az network nic create -n "$hub_vm_name-nic" --vnet-name $hub_vnet_name -g $rg --subnet $hub_vms_subnet_name -o none
az vm create -n $hub_vm_name -g $rg --image $vm_image --nics "$hub_vm_name-nic" --os-disk-name "$hub_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# spoke1 vm
echo -e "\e[1;36mDeploying $spoke1_vm_name VM...\e[0m"
az network nic create -n "$spoke1_vm_name-nic" --vnet-name $spoke1_vnet_name -g $rg --subnet $spoke1_subnet_name -o none
az vm create -n $spoke1_vm_name -g $rg --image $vm_image --nics "$spoke1_vm_name-nic" --os-disk-name "$spoke1_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# spoke2 vm
echo -e "\e[1;36mDeploying $spoke2_vm_name VM...\e[0m"
az network nic create -n "$spoke2_vm_name-nic" --vnet-name $spoke2_vnet_name -g $rg --subnet $spoke2_subnet_name -o none
az vm create -n $spoke2_vm_name -g $rg --image $vm_image --nics "$spoke2_vm_name-nic" --os-disk-name "$spoke2_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# onprem vm
echo -e "\e[1;36mDeploying $onprem_vm_name VM...\e[0m"
az network nic create -n "$onprem_vm_name-nic" --vnet-name $onprem_vnet_name -g $rg --subnet $onprem_vm_subnet_name -o none
az vm create -n $onprem_vm_name -g $rg --image $vm_image --nics "$onprem_vm_name-nic" --os-disk-name "$onprem_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# onprem route table
echo -e "\e[1;36mDeploying $onprem_vnet_name-rt Route Table and attaching it to $onprem_vm_subnet_name ...\e[0m"
az network route-table create -n $onprem_vnet_name-rt -g $rg -o none
az network route-table route create --address-prefix $hub_vnet_address -n to-$hub_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem_vnet_name-rt --next-hop-ip-address $onprem_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke1_vnet_address -n to-$spoke1_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem_vnet_name-rt --next-hop-ip-address $onprem_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke2_vnet_address -n to_$spoke2_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem_vnet_name-rt --next-hop-ip-address $onprem_gw_ext_private_ip -o none
az network vnet subnet update --vnet-name $onprem_vnet_name -n $onprem_vm_subnet_name --route-table $onprem_vnet_name-rt -g $rg -o none

# waiting on vpn gw to finish deployment
hub_gw_id=$(az network vnet-gateway show -g $rg -n $hub_gw_name --query id -o tsv)
wait_until_finished $hub_gw_id

# Getting VPN GW details
echo -e "\e[1;36mGetting $hub_gw_name VPN Gateway details...\e[0m"
hub_gw_pubip1=$(az network vnet-gateway show -n $hub_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv) && echo $hub_gw_name Public IP1: $hub_gw_pubip1
hub_gw_pubip2=$(az network vnet-gateway show -n $hub_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].tunnelIpAddresses[0]' -o tsv) && echo $hub_gw_name Public IP2: $hub_gw_pubip2
hub_gw_bgp_ip1=$(az network vnet-gateway show -n $hub_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv) && echo $hub_gw_name Bgp IP1: $hub_gw_bgp_ip1
hub_gw_bgp_ip2=$(az network vnet-gateway show -n $hub_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].defaultBgpIpAddresses[0]' -o tsv) && echo $hub_gw_name Bgp IP2: $hub_gw_bgp_ip2
hub_gw_asn_number=$(az network vnet-gateway show -n $hub_gw_name -g $rg --query bgpSettings.asn -o tsv) && echo $hub_gw_name ASN: $hub_gw_asn_number

# creating VPN connection between vpn gw and onprem gw
echo -e "\e[1;36mCreating VPN Connection between Azure VPN Gateway $hub_gw_name and Onprem Gateway $onprem_gw_vm_name...\e[0m"
az network vpn-connection create -g $rg -n $hub_vnet_name-to-$onprem_vnet_name --vnet-gateway1 $hub_gw_name --local-gateway2 $onprem_gw_vm_name --shared-key $psk --enable-bgp -o none


#######################
# OnPrem VPN Config   #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $onprem_gw_vm_name Gateway VM...\e[0m"
# ipsec.secrets
psk_file=~/ipsec.secrets
cat <<EOF > $psk_file
$onprem_gw_pubip $hub_gw_pubip1 : PSK $psk
$onprem_gw_pubip $hub_gw_pubip2 : PSK $psk
EOF

# ipsec.conf
ipsec_file=~/ipsec.conf
cat <<EOF > $ipsec_file
conn %default
         # Authentication Method : Pre-Shared Key
         leftauth=psk
         rightauth=psk
         ike=aes256-sha1-modp1024!
         ikelifetime=28800s
         # Phase 1 Negotiation Mode : main
         aggressive=no
         esp=aes256-sha1!
         lifetime=3600s
         keylife=3600s
         type=tunnel
         dpddelay=10s
         dpdtimeout=30s
         keyexchange=ikev2
         rekey=yes
         reauth=no
         dpdaction=restart
         closeaction=restart
         leftsubnet=0.0.0.0/0,::/0
         rightsubnet=0.0.0.0/0,::/0
         leftupdown=/etc/strongswan.d/ipsec-vti.sh
         installpolicy=yes
         compress=no
         mobike=no
conn Azure1
         # OnPrem Gateway Private IP Address :
         left=$onprem_gw_ext_private_ip
         # OnPrem Gateway Public IP Address :
         leftid=$onprem_gw_pubip
         # Azure VPN Gateway Public IP address :
         right=$hub_gw_pubip1
         rightid=$hub_gw_pubip1
         auto=start
         # unique number per IPSEC Tunnel eg. 100, 101 etc
         mark=101
conn Azure2
         # OnPrem Gateway Private IP Address :
         left=$onprem_gw_ext_private_ip
         # OnPrem Gateway Public IP Address :
         leftid=$onprem_gw_pubip
         # Azure VPN Gateway Public IP address :
         right=$hub_gw_pubip2
         rightid=$hub_gw_pubip2
         auto=start
         # unique number per IPSEC Tunnel eg. 100, 101 etc
         mark=102
EOF


# ipsec-vti.sh
onprem_gw_vti_address1=172.16.0.11
onprem_gw_vti_address2=172.16.0.12
ipsec_vti_file=~/ipsec-vti.sh
tee -a $ipsec_vti_file > /dev/null <<'EOT'
#!/bin/bash

#
# /etc/strongswan.d/ipsec-vti.sh
#

IP=$(which ip)
IPTABLES=$(which iptables)
PLUTO_MARK_OUT_ARR=(${PLUTO_MARK_OUT//// })
PLUTO_MARK_IN_ARR=(${PLUTO_MARK_IN//// })
case "$PLUTO_CONNECTION" in
  Azure1)
    VTI_INTERFACE=vti0
    VTI_LOCALADDR=$onprem_gw_vti_address1/32
    VTI_REMOTEADDR=$hub_gw_bgp_ip1/32
    ;;
  Azure2)
    VTI_INTERFACE=vti1
    VTI_LOCALADDR=$onprem_gw_vti_address2/32
    VTI_REMOTEADDR=$hub_gw_bgp_ip2/32
    ;;
esac
case "${PLUTO_VERB}" in
    up-client)
        $IP link add ${VTI_INTERFACE} type vti local ${PLUTO_ME} remote ${PLUTO_PEER} okey ${PLUTO_MARK_OUT_ARR[0]} ikey ${PLUTO_MARK_IN_ARR[0]}
        sysctl -w net.ipv4.conf.${VTI_INTERFACE}.disable_policy=1
        sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=2 || sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=0
        $IP addr add ${VTI_LOCALADDR} remote ${VTI_REMOTEADDR} dev ${VTI_INTERFACE}
        $IP link set ${VTI_INTERFACE} up mtu 1350
        $IPTABLES -t mangle -I FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        $IPTABLES -t mangle -I INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
        $IP route flush table 220
        ;;
    down-client)
        $IP link del ${VTI_INTERFACE}
        $IPTABLES -t mangle -D FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        $IPTABLES -t mangle -D INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
        ;;
esac

# Enable IPv4 forwarding
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
sysctl -w net.ipv4.conf.eth0.disable_policy=1
EOT

sed -i "/\$onprem_gw_vti_address1/ s//$onprem_gw_vti_address1/" $ipsec_vti_file
sed -i "/\$onprem_gw_vti_address2/ s//$onprem_gw_vti_address2/" $ipsec_vti_file
sed -i "/\$hub_gw_bgp_ip1/ s//$hub_gw_bgp_ip1/" $ipsec_vti_file
sed -i "/\$hub_gw_bgp_ip2/ s//$hub_gw_bgp_ip2/" $ipsec_vti_file


# frr.conf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 10.1
frr defaults traditional
hostname $onprem_gw_vm_name
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $default_address1 $onprem_gw_ext_gw_ip
ip route $default_address2 $onprem_gw_ext_gw_ip
ip route $onprem_vnet_address $onprem_gw_ext_gw_ip
!
router bgp $onprem_gw_asn
 bgp router-id $onprem_gw_ext_private_ip
 no bgp ebgp-requires-policy
 neighbor $hub_gw_bgp_ip1 remote-as $hub_gw_asn_number
 neighbor $hub_gw_bgp_ip1 description azgw1
 neighbor $hub_gw_bgp_ip1 ebgp-multihop 255
 neighbor $hub_gw_bgp_ip2 remote-as $hub_gw_asn_number
 neighbor $hub_gw_bgp_ip2 description azgw2
 neighbor $hub_gw_bgp_ip2 ebgp-multihop 255
 !
 address-family ipv4 unicast
  network $onprem_vnet_address
  neighbor $hub_gw_bgp_ip1 soft-reconfiguration inbound
  neighbor $hub_gw_bgp_ip2 soft-reconfiguration inbound
 exit-address-family
exit
!
EOF

##### copy config files to onprem gw
echo -e "\e[1;36mCopying and applying S2S/BGP VPN Config files to $onprem_gw_vm_name Gateway VM...\e[0m"
scp -o StrictHostKeyChecking=no $psk_file $ipsec_file $ipsec_vti_file $frr_conf_file $onprem_gw_pubip:/home/$admin_username
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo mv /home/$admin_username/ipsec.* /etc/ && sudo mv /home/$admin_username/ipsec-vti.sh /etc/strongswan.d/ && chmod +x /etc/strongswan.d/ipsec-vti.sh && sudo mv /home/$admin_username/frr.conf /etc/frr/ && sudo service frr restart && sudo systemctl restart ipsec"
echo -e "\e[1;36mChecking the status of S2S VPN between $onprem_gw_vm_name and $hub_gw_name VPN Gateway...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo ipsec status"
# clean up config files
rm $psk_file $ipsec_file $ipsec_vti_file $frr_conf_file $cloudinit_file


#############
# Diagnosis #
#############

# checking the bgp details on the NVA VM
echo -e "\e[1;36mChecking the BGP details on $hub_nva_name VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo vtysh -c 'show bgp summary' && sudo vtysh -c 'show bgp all'"
echo -e "\e[1;36mChecking the received routes on $hub_nva_name VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $rs_ip1 received-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $rs_ip2 received-routes'"
echo -e "\e[1;36mChecking the advertised routes to $hub_nva_name VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $rs_ip1 advertised-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $rs_ip2 advertised-routes'"

# checking the bgp details on the onprem gw
echo -e "\e[1;36mChecking the BGP details on $onprem_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo vtysh -c 'show bgp summary' && sudo vtysh -c 'show bgp all'"
echo -e "\e[1;36mChecking the received routes on $onprem_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub_gw_bgp_ip1 received-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub_gw_bgp_ip2 received-routes'"
echo -e "\e[1;36mChecking the advertised routes to $onprem_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub_gw_bgp_ip1 advertised-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub_gw_bgp_ip2 advertised-routes'"

# show BGP route tables in RS
# Learned routes by Azure Route Server
echo -e "\e[1;36mListing learned routes by $hub_rs_name Azure Route Server...\e[0m"
az network routeserver peering list-learned-routes -n $hub_nva_name-peering --routeserver $hub_rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-learned-routes -n $hub_nva_name-peering --routeserver $hub_rs_name -g $rg --query 'RouteServiceRole_IN_1' -o table
# Advertised routes from Azure Route Server
echo -e "\e[1;36mListing advertised routes by $hub_nva_name to $hub_rs_name Azure Route Server...\e[0m"
az network routeserver peering list-advertised-routes -n $hub_nva_name-peering --routeserver $hub_rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-advertised-routes -n $hub_nva_name-peering --routeserver $hub_rs_name -g $rg --query 'RouteServiceRole_IN_1' -o table

# vnet gateway learned routes
echo -e "\e[1;36mListing learned routes by $hub_gw_name VPN Gateway...\e[0m"
az network vnet-gateway list-learned-routes -g $rg -n $hub_gw_name -o table
az network vnet-gateway list-advertised-routes -g $rg -n $hub_gw_name --peer $onprem_gw_ext_private_ip -o table

# effective routes on spoke vms
# hub vm
echo -e "\e[1;36mListing effective routes on $hub_vm_name NIC ...\e[0m"
az network nic show-effective-route-table -g $rg -n $hub_vm_name-nic -o table
# spoke1 vm
echo -e "\e[1;36mListing effective routes on $spoke1_vm_name NIC ...\e[0m"
az network nic show-effective-route-table -g $rg -n $spoke1_vm_name-nic -o table
# spoke2 vm
echo -e "\e[1;36mListing effective routes on $spoke2_vm_name NIC ...\e[0m"
az network nic show-effective-route-table -g $rg -n $spoke2_vm_name-nic -o table



##########
#Clean up
##########
# az network routeserver peering delete -g $rg -n $hub_nva_name-peering --routeserver $hub_rs_name --yes --no-wait
# az group delete -n $rg -y --no-wait 
